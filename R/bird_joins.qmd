---
title: "eds221-day7-activities"
format: html
editor: visual
---

```{r}
library(tidyverse)
library(here)
```

## **Task 1: Joins on birds**

In this section, you'll test and explore a number of different joins.

-   Create a new .Rmd in your `R` folder saved as `bird_joins.Rmd`

-   Read in the data sets and store the data frames as `bird_observations`, `sites`, `surveys`, and `taxalist` (it should be clear from the raw file names which is which)

    ```{r}
    bird_observations <- read_csv(here("data","knb-lter-cap.256.9","52_pp52_birds_1.csv"))

    sites <- read_csv(here("data","knb-lter-cap.256.9","52_pp52_sites_1.csv"))

    surveys <- read_csv(here("data","knb-lter-cap.256.9","52_pp52_surveys_1.csv"))

    taxalist <- read_csv(here("data","knb-lter-cap.256.9","52_pp52_taxalist_1.csv"))
    ```

-   Create a subset of `bird_observations` called `birds_subset` that only contains observations for birds with species id "BHCO" and "RWBL", and from sites with site ID "LI-W" and "NU-C"

    ```{r}
    birds_subset <- bird_observations %>% 
      filter(species_id %in% c("BHCO", "RWBL"), site_id %in% c("LI-W", "NU-C"))
    ```

### **Left join practice**

-   Use left join(s) to update `birds_subset` so that it also includes `sites` and `taxalist` information. For each join, include an explicit argument saying which variable you are joining by (even if it will just assume the correct one for you). Store the updated data frame as `birds_left`. Make sure to look at the output - is what it contains consistent with what you expected it to contain?

    ```{r}
    birds_left1 <- left_join(birds_subset,sites, by = "site_id")


    birds_left <- left_join(birds_left1, taxalist, by = "species_id")
    ```

### **Full join practice**

-   First, answer: what do you expect a `full_join()` between `birds_subset` and `sites` to contain?

    ```{r}
    #both information from birds_subset and sites. Before the columns from sites were left out because there was no match in birds_subset.
    ```

-   Write code to `full_join` the `birds_subset` and `sites` data into a new object called `birds_full`. Explicitly include the variable you're joining by. Look at the output. Is it what you expected?

    ```{r}
    birds_full <- full_join(birds_subset, sites, by = "site_id")
    ```

### **Inner join practice**

-   First, answer: what do you expect an `inner_join()` between `birds_subset` and `taxalist` to contain?

    ```{r}
    #only the matching data from both
    ```

-   Write code to `inner_join()` the `birds_subset` and `taxalist`, called `birds_inner`. Include an argument for what variable you'll be joining by.

    ```{r}
    birds_inner <- inner_join(birds_subset, taxalist, by = "species_id")
    ```

-   What would you get if instead of `inner_join()` you'd used `left_join()` for this example? Try it out & check. Why does that make sense for this scenario? It what case would you expect the outcome to differ from an `inner_join()`?

```{r}
birds_left_taxa <- left_join(birds_subset, taxalist, by = "species_id")
#if they were swapped?
birds_left_taxa_swap <- left_join(taxalist, birds_subset, by = "species_id")
```

## **Task 2: Data wrangling and visualization with birds**

Continue in your same .Rmd that you created for Task 1

-   Starting with your `birds` object, rename the `notes` column to `bird_obs_notes` (so this doesn't conflict with `notes` in the `surveys` dataset

    ```{r}
    birds_subset %>% 
      rename(bird_obs_notes = notes)
    ```

-   Then, create a subset that contains *all observations* in the `birds` dataset, joins the taxonomic, site and survey information to it, and is finally limited to only columns `survey_date`, `common_name`, `park_name`, and `bird_count`. You can decide the order that you want to create this in (e.g.Â limit the columns first, then join, or the other way around).

    ## STUCK ON THIS, resolved?

    ```{r}
    # taxalist_subset <- taxalist %>% 
    #   select(common_name)
    # 
    # site_subset <- sites %>% 
    #   select(park_name)
    # 
    # surveys_subset <- surveys %>% 
    #   select(survey_date)
    # 
    # birdss_subset <- bird_observations %>% 
    #   select(bird_count)
    # 
    # joined_subset <- full_join(birdss_subset,taxalist_subset, by = "") #%>% 
    # #  full_join(birdss_subset,site_subset) %>% 
    #  # full_join(birdss_subset,surveys_subset)

    joined_subset <-bird_observations %>% 
      full_join(taxalist, by = "species_id") %>% 
      full_join(sites, by = "site_id") %>% 
      full_join(surveys, by = "survey_id")

    condensed_joined_subset <- joined_subset %>% 
      select(common_name,park_name,survey_date,bird_count)
      
    ```

-   Use `lubridate::month()` to add a new column called `survey_month`, containing only the month number. Then, convert the month number to a factor (again within `mutate()`)

    ```{r}

    # urchin_mean_by_month <- urchin_counts %>% 
    #   mutate(date = lubridate::mdy(date)) %>% 
    #   mutate(month = lubridate::month(date)) %>% 
    #   group_by(month) %>% 
    #   summarize(mean_size = mean(size_mm))

    joined_by_month <- condensed_joined_subset %>% 
      mutate(survey_month = lubridate::month(survey_date)) %>% 
      mutate(survey_month = as.factor(survey_month))
    ```

-   Learn a new function on your own! Use `dplyr::relocate()` to move the new `survey_month` column to immediately after the `survey_date` column. You can do this in a separate code chunk, or pipe straight into it from your existing code.

    ```{r}
    joined_relocate <- joined_by_month %>% 
      relocate(before = survey_month, after = survey_date)
    ```

-   Find the total number of birds observed by *park* and *month* (i.e., you'll `group_by(park_name, survey_month)`)

    ```{r}
    joined_relocate %>% 
      group_by(park_name,before) %>% 
      summarize(n = n())
    ```

-   Filter to only include parks "Lindo", "Orme", "Palomino" and "Sonrisa"

    ```{r}
    joined_relocate %>% 
      filter(park_name = "Lindo"|park_name = "Orme"|park_name = "Palomino"|park_name = "Sonrisa")
    ```
